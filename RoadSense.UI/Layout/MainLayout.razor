@using Microsoft.AspNetCore.Components.Authorization
@using RoadSense.UI.Services.User
@using System.Security.Claims
@inherits LayoutComponentBase

@inject AuthenticationStateProvider AuthStateProvider
@inject NavigationManager NavManager
@inject UserAuthService AuthService

@* Required *@
<MudThemeProvider />
<MudPopoverProvider />

@* Needed for dialogs *@
<MudDialogProvider />

@* Needed for snackbars *@
<MudSnackbarProvider />

<AuthorizeView>
    <Authorized>
        @{
            <MudLayout>
                <MudAppBar Elevation="1" Style="background-color: #061729;">
                    <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@((e) => DrawerToggle())" />
                    <MudText Typo="Typo.h6">
                        Welcome @(user.Claims.FirstOrDefault(x => x.Type == "unique_name")?.Value ?? "Guest")!
                    </MudText>

                    <MudSpacer />
                    <MudBadge Color="Color.Success" Overlap="true" Bordered="true">
                        <MudAvatar>
                            <MudImage Src="images/avatar.jpg" Width="80"/>
                        </MudAvatar>
                    </MudBadge>
                </MudAppBar>
                <MudDrawer @bind-Open="_drawerOpen" Elevation="2" Style="background-color: #001c38;">
                    <MudDrawerHeader>
                        <div style="display: flex; justify-content: center; align-items: center; width: 100%;">
                            <img src="/images/Roadsensor_ICON.png" style="object-fit: contain;" width="100" />
                        </div>
                    </MudDrawerHeader>
                    <MudNavMenu Color="Color.Secondary">
                        <MudNavLink Style="color: white" Href="/dashboard" Icon="@Icons.Material.Filled.Dashboard" IconColor="Color.Tertiary">Dashboard</MudNavLink>

                        <MudNavGroup Style="color: white" Title="Violations" Expanded="true">
                            <MudNavLink Style="color: white" Href="/users">Live Camera</MudNavLink>
                            <MudNavLink Style="color: white" Href="/security">Reports</MudNavLink>
                        </MudNavGroup>
                        <MudNavGroup Style="color: white" Title="Maintenance" Expanded="true">
                            <MudNavLink Style="color: white" Href="/maintenace/manage/violations">Manage Violations</MudNavLink>
                            <MudNavLink Style="color: white" Href="/maintenace/manage/users">Manage User</MudNavLink>
                        </MudNavGroup>
                        <MudNavLink Style="color: white; margin-top: 20px" Icon="@Icons.Material.Filled.Logout" OnClick="Logout">Logout</MudNavLink>
                    </MudNavMenu>
                </MudDrawer>
                <MudMainContent>
                    <div class="page">
                        <main>
                            <article class="content p-3">
                                @Body
                            </article>
                        </main>

                    </div>
                </MudMainContent>
            </MudLayout>
        }
    </Authorized>
    <NotAuthorized>
        <div class="page">
            <main>
                <article class="content p-0">
                    @Body
                </article>
            </main>
        </div> 
    </NotAuthorized>
</AuthorizeView>

<div id="blazor-error-ui" data-nosnippet>
    An unhandled error has occurred.
    <a href="." class="reload">Reload</a>
    <span class="dismiss">🗙</span>
</div>

@code {

    [CascadingParameter] private Task<AuthenticationState> AuthStateTask { get; set; }

    private ClaimsPrincipal user = new();

    private async Task Logout()
    {
        await AuthService.LogoutAsync();
        NavManager.NavigateTo("/", forceLoad: true);
    }

    bool _drawerOpen = true;

    void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthStateTask;
        user = authState.User;

        // if(user.Identity.IsAuthenticated){
        //     NavManager.NavigateTo("/dashboard");
        // }
    }
}

<style>
    .mud-avatar.mud-avatar-medium {
        width: 36px;
        height: 36px;
        font-size: 1.25rem;
    }

    .mud-badge.mud-badge-top.right.mud-badge-overlap {
        inset: auto auto calc(100% - 14px) calc(100% - 12px);
    }

    .mud-badge-root {
        position: relative;
        display: inline-block;
        margin-top: 10px;
    }
</style>